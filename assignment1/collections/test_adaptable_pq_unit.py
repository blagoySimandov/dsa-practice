import unittest
from adaptable_pq import AdaptablePQ


# The test below was generated by AI!
class TestAdaptablePQ(unittest.TestCase):
    def setUp(self):
        self.pq = AdaptablePQ()

    def test_add_and_peek(self):
        self.pq.add("Task 1", 5)
        self.pq.add("Task 2", 3)

        task, priority = self.pq.peek()
        self.assertEqual(task, "Task 2")
        self.assertEqual(priority, 3)

    def test_pop(self):
        self.pq.add("Task 1", 5)
        self.pq.add("Task 2", 3)
        self.pq.add("Task 3", 7)

        task, priority = self.pq.pop()
        self.assertEqual(task, "Task 2")
        self.assertEqual(priority, 3)

        task, priority = self.pq.pop()
        self.assertEqual(task, "Task 1")
        self.assertEqual(priority, 5)

        task, priority = self.pq.pop()
        self.assertEqual(task, "Task 3")
        self.assertEqual(priority, 7)

    def test_update_priority(self):
        self.pq.add("Task 1", 5)
        self.pq.add("Task 2", 3)
        self.pq.add("Task 3", 7)

        self.pq.update_priority("Task 3", 1)

        task, priority = self.pq.peek()
        self.assertEqual(task, "Task 3")
        self.assertEqual(priority, 1)

    def test_remove(self):
        self.pq.add("Task 1", 5)
        self.pq.add("Task 2", 3)
        self.pq.add("Task 3", 7)

        self.assertEqual(len(self.pq), 3)

        self.pq.remove("Task 2")
        self.assertEqual(len(self.pq), 2)

        task, priority = self.pq.pop()
        self.assertEqual(task, "Task 1")
        self.assertEqual(priority, 5)

    def test_len(self):
        self.assertEqual(len(self.pq), 0)

        self.pq.add("Task 1", 5)
        self.assertEqual(len(self.pq), 1)

        self.pq.add("Task 2", 3)
        self.assertEqual(len(self.pq), 2)

        self.pq.remove("Task 1")
        self.assertEqual(len(self.pq), 1)

        self.pq.pop()
        self.assertEqual(len(self.pq), 0)

    def test_empty_queue_exceptions(self):
        with self.assertRaises(IndexError):
            self.pq.pop()

        with self.assertRaises(IndexError):
            self.pq.peek()

    def test_remove_nonexistent(self):
        self.pq.add("Task 1", 5)

        with self.assertRaises(KeyError):
            self.pq.remove("Task 2")

    def test_update_nonexistent(self):
        self.pq.add("Task 1", 5)

        with self.assertRaises(KeyError):
            self.pq.update_priority("Task 2", 3)

    def test_duplicate_items(self):
        self.pq.add("Task 1", 5)
        self.pq.add("Task 1", 3)

        self.assertEqual(len(self.pq), 1)

        task, priority = self.pq.peek()
        self.assertEqual(task, "Task 1")
        self.assertEqual(priority, 3)


if __name__ == "__main__":
    unittest.main()

